SimpleExec.Command
SimpleExec.ExitCodeException
SimpleExec.ExitCodeException.ExitCode.get -> int
SimpleExec.ExitCodeException.ExitCodeException(int exitCode) -> void
SimpleExec.NonZeroExitCodeException
SimpleExec.NonZeroExitCodeException.NonZeroExitCodeException() -> void
static SimpleExec.Command.Read(string name, string args = null, string workingDirectory = null, bool noEcho = false, string windowsName = null, string windowsArgs = null, string logPrefix = null, System.Action<System.Collections.Generic.IDictionary<string, string>> configureEnvironment = null, bool createNoWindow = false, System.Text.Encoding encoding = null, System.Func<int, bool> handleExitCode = null) -> string
static SimpleExec.Command.ReadAsync(string name, string args = null, string workingDirectory = null, bool noEcho = false, string windowsName = null, string windowsArgs = null, string logPrefix = null, System.Action<System.Collections.Generic.IDictionary<string, string>> configureEnvironment = null, bool createNoWindow = false, System.Text.Encoding encoding = null, System.Func<int, bool> handleExitCode = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string>
static SimpleExec.Command.Run(string name, string args = null, string workingDirectory = null, bool noEcho = false, string windowsName = null, string windowsArgs = null, string logPrefix = null, System.Action<System.Collections.Generic.IDictionary<string, string>> configureEnvironment = null, bool createNoWindow = false, System.Func<int, bool> handleExitCode = null) -> void
static SimpleExec.Command.RunAsync(string name, string args = null, string workingDirectory = null, bool noEcho = false, string windowsName = null, string windowsArgs = null, string logPrefix = null, System.Action<System.Collections.Generic.IDictionary<string, string>> configureEnvironment = null, bool createNoWindow = false, System.Func<int, bool> handleExitCode = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
